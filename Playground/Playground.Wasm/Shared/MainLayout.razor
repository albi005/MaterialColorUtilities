@using Playground.Wasm.Services
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@implements IDisposable

<MudThemeProvider
    @ref="@_mudThemeProvider"
    @bind-IsDarkMode="@_isDarkMode"
    Theme="@ThemeService.MudTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => _drawerOpen = !_drawerOpen)" />
        <a href="">
            <MudText Typo="Typo.h5" Style="color: var(--mud-palette-appbar-text)">
                Material Color
                <MudHidden Breakpoint="@Breakpoint.Xs">
                    Utilities
                </MudHidden>
                for .NET
            </MudText>
        </a>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Href="https://github.com/albi005/MaterialColorUtilities" Style="color: var(--mud-palette-appbar-text)" />
    </MudAppBar>
    <MudDrawer Elevation="0" @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" >
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _isDarkMode;
    MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            ThemeService.IsDark = _isDarkMode;
            ThemeService.ThemeChanged += StateHasChanged;
        }
    }

    public void Dispose() => ThemeService.ThemeChanged -= StateHasChanged;
}