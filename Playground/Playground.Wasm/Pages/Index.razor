@page "/"
@inject ThemeService ThemeService
@using Playground.Wasm.Extensions
@using Playground.Wasm.Services
@using MaterialColorUtilities.ColorAppearance
@using MaterialColorUtilities.Utils
@using MudBlazor.Utilities
@implements IDisposable

<PageTitle>Material Color Utilities .NET</PageTitle>

<div class="d-flex flex-wrap justify-center gap-4 py-4">
    <MudPaper Class="pa-4" Style="width: 460px">
        <div class="d-flex pb-4">
            <ColorItem Name="Seed"
                       Color="@ThemeService.Seed"
                       OnColor="@(Hct.FromInt(ThemeService.Seed).Tone > 49.7 ? 0xFF000000 : 0xFFFFFFFF)"/>
        </div>
        <ColorScheme Scheme="@ThemeService.Scheme"/>
        <div class="pb-4"></div>
        <ColorInput/>
        <div class="pb-4"></div>
        <StrategySelector/>
    </MudPaper>
    <MudPaper Class="pa-4" Style="width: 460px">
        <h3>
            <a href="https://material.io/blog/science-of-color-design" target="_blank">
                HCT
                <span class="material-symbols-outlined">open_in_new</span>
            </a>
        </h3>
        <p class="info">Chroma is maximized</p>
        <ColorPlot
            Resolution="200"
            Func="@((x, y) => Hct.From(x, 100, y).ToInt())"
            FuncInverse="@(color => { Hct hct = Hct.FromInt(color); return (hct.Hue, hct.Tone); })"
            LabelX="Hue"
            LabelY="Tone"
            MaxX="360"
            MaxY="100"
            MinX="0"
            MinY="0"
            CacheId="hct"/>
        <HctSliders/>
    </MudPaper>
</div>
<div class="d-flex flex-wrap justify-center gap-4 pb-4">
    <MudPaper Class="pa-4">
        <h3>
            <a href="https://en.wikipedia.org/wiki/Color_appearance_model#CAM16" target="_blank">
                CAM16 from JCh
                <span class="material-symbols-outlined">open_in_new</span>
            </a>
        </h3>
        <p class="info">Chroma is maximized</p>
        <MudTooltip Text="from JCh, " Placement="Placement.Top">
            <ColorPlot
                Resolution="200"
                Func="@((x, y) => Cam16.FromJch(y, 100, x).ToInt())"
                FuncInverse="@(color => { Cam16 cam16 = Cam16.FromInt(color); return (cam16.Hue, cam16.J); })"
                LabelX="h"
                LabelY="J"
                MaxX="360"
                MaxY="100"
                MinX="0"
                MinY="0"
                CacheId="cam16"/>
        </MudTooltip>
    </MudPaper>
    <MudPaper Class="pa-4">
        <h3>
            <a href="https://en.wikipedia.org/wiki/HSL_and_HSV" target="_blank">
                HSL
                <span class="material-symbols-outlined">open_in_new</span>
            </a>
        </h3>
        <p class="info">Saturation is maximized</p>
        <ColorPlot
            Resolution="200"
            Func="@Hsl"
            FuncInverse="@HslInverse"
            LabelX="H"
            LabelY="L"
            MaxX="360"
            MaxY="1"
            MinX="0"
            MinY="0"
            CacheId="hsl"/>
    </MudPaper>
    <MudPaper Class="pa-4">
        <h3>
            <a href="https://bottosson.github.io/misc/colorpicker/" target="_blank">
                OKHSL
                <span class="material-symbols-outlined">open_in_new</span>
            </a>
        </h3>
        <p class="info">Saturation is maximized</p>
        <ColorPlot
            Resolution="200"
            Func="@Okhsl"
            FuncInverse="@OkhslInverse"
            LabelX="H"
            LabelY="L"
            MaxX="1"
            MaxY="1"
            MinX="0"
            MinY="0"
            CacheId="okhsl"/>
    </MudPaper>
</div>

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ThemeService.Changed += StateHasChanged;
    }

    private uint Hsl(double x, double y)
    {
        MudColor mudColor = new(x, 1, y, 1);
        return ColorUtils.ArgbFromRgb(mudColor.R, mudColor.G, mudColor.B);
    }

    private (double, double) HslInverse(uint color)
    {
        MudColor mudColor = color.ToMudColor();
        return (mudColor.H, mudColor.L);
    }

    private uint Okhsl(double x, double y)
    {
        (double r, double g, double b) = OkColor.OkHslToSrgb((x, 1, y));
        return ColorUtils.ArgbFromRgb(
            (uint)(r * 255),
            (uint)(g * 255),
            (uint)(b * 255));
    }

    private (double, double) OkhslInverse(uint color)
    {
        (double h, double s, double l) okhsl = OkColor.SrgbToOkHsl((
            ColorUtils.RedFromArgb(color) / 255.0,
                ColorUtils.GreenFromArgb(color) / 255.0,
                ColorUtils.BlueFromArgb(color) / 255.0));
        return (okhsl.h, okhsl.l);
    }

    public void Dispose()
    {
        ThemeService.Changed -= StateHasChanged;
    }

}